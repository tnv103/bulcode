<?php 

function expandable_search_block_view_alter(&$data, $block) {
	
	// PROGRESS: the plugin id of the search form is: search_form_block
	// PROBLEM: the hook is not always called for all blocks
	// RESEARCH: this is how you get the plugin id: dpm($block->getPluginId());
	//print_r("<script>console.log('".$block->getPluginId()."');</script>");
	if ($block->getPluginId() == 'search_form_block') {
		$data['#pre_render'][] = 'expandable_search_search_form_block_pre_render';
	}
}
function expandable_search_search_form_block_pre_render(array $build){
	//$build["content"] = $build;
	//$result = print_r($build,true);
	//$result = addslashes(htmlspecialchars($result));
	//echo '<pre>' . $result . '</pre>';
	$build["content"]["#attributes"]= array("class" => array("expanded_search"));
	$build["content"]["keys"]["#attributes"] = array("class"=> array("expanded_search--input"), "placeholder"=>"Search Text");
	$build["content"]['actions']['submit'] = array();
    $build["content"]['actions']['expand'] = array(
      '#type' => 'button',
      '#value' => '',
      // Prevent op from showing up in the query string.
      '#name' => '',
	  "#attributes" => array("class" => array("expanded_search--label"))
    );
	
	
	\Drupal::logger('expandable_search')->notice(print_r(array_map("htmlentities",$build["content"]["keys"]),true));
	\Drupal::logger('expandable_search')->notice(print_r(array_map("htmlentities",$build["content"]["actions"]),true));
	return $build;
}






// helper function to check if a string ends with a certain extension
function expandable_search_endsWith($haystack, $needle)
{
    $length = strlen($needle);
    if ($length == 0) {
        return true;
    }

    return (substr($haystack, -$length) === $needle);
}

/**
* Implements hook_library_info_build(). For creating dynamic libraries.
*/
function expandable_search_library_info_build() {
	$libs = [];

	// create dynamic libraries from the module config
	$config = \Drupal::config('expandable_search.config');
	foreach($config->get("expandable_search_dependencies") as $key => $library){
	
		// create css library
		if(expandable_search_endsWith($library["file"],"css")){
			$libs['expandable_search.'.$key] = [
			  'css' => [
					'base' => [
						'/libraries/'.$key.'/'.$library["file"] => [],
					]
			  ]
			];
		}
		// create js library
		else if(expandable_search_endsWith($library["file"],"js")){
			$libs['expandable_search.'.$key] = [
			  'js' => [
				'/libraries/'.$key.'/'.$library["file"] => [],
			  ]
			];
		}
	}
	return $libs;
}

/**
 * Implements hook_page_attachments(). Adds the library to every or selected pages.
 */
function expandable_search_page_attachments(array &$page) {
	// attach the dynamic libraries and the main library to all pages
	$config = \Drupal::config('expandable_search.config');
	foreach($config->get("expandable_search_dependencies") as $key => $library){
		$page['#attached']['library'][] = 'expandable_search/expandable_search.'.$key;
	}
	$page['#attached']['library'][] = 'expandable_search/expandable_search';
}